RSpec.describe CategoriesController, type: :controller do
    let(:admin_user) { FactoryBot.create(:user, :admin) }
    let(:regular_user) { FactoryBot.create(:user) }
    let(:category) { FactoryBot.create(:category) }
  
    describe "GET #index" do
      it "returns a success response" do
        get :index
        expect(response).to be_successful
      end
    end
  
    describe "GET #show" do
      it "returns a success response" do
        get :show, params: { id: category.id }
        expect(response).to be_successful
      end
  
      it "redirects to items_path if category has no items" do
        get :show, params: { id: category.id }
        expect(flash[:notice]).to eq("Il n'y a pas encore d'objet dans cette catégorie.")
        expect(response).to redirect_to(items_path)
      end
    end
  
    describe "GET #new" do
      context "when user is an admin" do
        before { sign_in(admin_user) }
  
        it "returns a success response" do
          get :new
          expect(response).to be_successful
        end
      end
  
      context "when user is not an admin" do
        before { sign_in(regular_user) }
  
        it "redirects to items_path with an alert message" do
          get :new
          expect(response).to redirect_to(items_path)
          expect(flash[:alert]).to eq("Vous n'êtes pas autorisé à effectuer cette action.")
        end
      end
    end
  
    describe "GET #edit" do
      context "when user is an admin" do
        before { sign_in(admin_user) }
  
        it "returns a success response" do
          get :edit, params: { id: category.id }
          expect(response).to be_successful
        end
      end
  
      context "when user is not an admin" do
        before { sign_in(regular_user) }
  
        it "redirects to items_path with an alert message" do
          get :edit, params: { id: category.id }
          expect(response).to redirect_to(items_path)
          expect(flash[:alert]).to eq("Vous n'êtes pas autorisé à effectuer cette action.")
        end
      end
    end

    describe "#update" do
    before do
      @category = FactoryBot.create(:category)
    end

    context "with valid parameters" do
      let(:category_attributes) { FactoryBot.attributes_for(:category, name: "New Category Name") }

      it "updates the category" do
        put :update, params: { id: @category.id, category: category_attributes }
        @category.reload
        expect(@category.name).to eq "New Category Name"
      end

      it "redirects to the category show page" do
        put :update, params: { id: @category.id, category: category_attributes }
        expect(response).to redirect_to category_path(@category)
      end
    end

    context "with invalid parameters" do
      let(:category_attributes) { FactoryBot.attributes_for(:category, name: "") }

      it "does not update the category" do
        put :update, params: { id: @category.id, category: category_attributes }
        @category.reload
        expect(@category.name).to_not eq ""
      end

      it "re-renders the edit template" do
        put :update, params: { id: @category.id, category: category_attributes }
        expect(response).to render_template :edit
      end
    end

    context "when not logged in as admin" do
      before do
        allow(controller).to receive(:current_user).and_return(nil)
      end

      it "does not update the category" do
        put :update, params: { id: @category.id, category: { name: "New Category Name" } }
        @category.reload
        expect(@category.name).to_not eq "New Category Name"
      end

      it "redirects to the items page" do
        put :update, params: { id: @category.id, category: { name: "New Category Name" } }
        expect(response).to redirect_to items_path
      end
    end
  end

  describe "#destroy" do
    before do
      @category = FactoryBot.create(:category)
    end

    context "when logged in as admin" do
      before do
        allow(controller).to receive(:current_user).and_return(FactoryBot.create(:admin_user))
      end

      it "destroys the category" do
        delete :destroy, params: { id: @category.id }
        expect(Category.exists?(@category.id)).to be_falsey
      end

      it "redirects to the categories page" do
        delete :destroy, params: { id: @category.id }
        expect(response).to redirect_to categories_path
      end
    end

    context "when not logged in as admin" do
      before do
        allow(controller).to receive(:current_user).and_return(nil)
      end

      it "does not destroy the category" do
        delete :destroy, params: { id: @category.id }
        expect(Category.exists?(@category.id)).to be_truthy
      end

      it "redirects to the items page" do
        delete :destroy, params: { id: @category.id }
        expect(response).to redirect_to items_path
      end
    end
  end
end